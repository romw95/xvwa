#!/bin/bash
#ScriptValidacionEntradas(XVWA)

echo "Validacion de Entradas"

#Vulnerabilidades-Ataques.

#Ok-InputValidation-SqlInjection-Aut: Consiste en la insercion de queries SQL en la entrada de datos, permite Consultar, Modificar, Elimar informacion y la ejecucion operaciones administrativas en el SGBD(como apagado de DBMS), permiete la ejecucion de comandos SQL predefinidos.Es muy comun encontrarlo en lenguajes PHP,ASP. Tambien se encuentran en los lenguajes J2EE,ASP.NET pero es menos probable y mas complicado.

#Ok-InputValidation-SqlInjection(Blind)-Aut: Es muy similar a la anterior (SqlInjection), en muchas ocasiones al insertar sentencias SQL se reflejan errores de SQL que regresa el motor esta vulnerabilidad se caracteriza por no mostrar errores y se basa en sentencias de true o false.

#Ok-InputValidation-OsCommandInjection-Aut: Es un ataque en el cual la meta es la ejecucion de comandos en el sistema operativo. Este sucede cuando un aplicativo acepta datos insanos ingresados por el usuario.

#Ok-InputValidation-XpathInjection-Aut: Ocurre cuando un sitio utiliza informacion del usuario para construir una consulta XPath para datos XML. Tiene lugar en las solicitudes a las bases de datos SQL.

#No-InputValidation-FormulaInjection: Ocurre cuando sitios web embeben archivos CSV de entradas insanas por el usuario. Cuando se abre un archivo CSV el software excel o libreOffice interpreta cualquier celda que comience con "=" como una formula. Esto se utiliza para realizar ataques como: Secuestro de computadoras de usuarios. Extraccion de contenidos de otras hojas de calculo.

#No-InputValidation-UnrestrictedFileUpload: La carga de archivos representan un riesgo en todas las aplicaciones ya que en muchos ataques lo que se busca es ejecutar el codigo del lado del servidor.La consecuencia de la carga de archivos sin restricciones puede variar desde una ejecucion de codigo y adquisicion completa del sistema, ataques del lado del cliente o la simple desfiguracion delsitio depende del almacenamiento del archivo dentro de la aplicacion.

#InputValidation-PHP Object Injection: Es una vulnerabilidad a nivel aplicativo que permite ataques de SQLInyeccion, PathTraversal. Ocurre cuando la entrada de un usuarion no se desinfecta correctamente antes de pasar a la funcion PHP unserialize(), los atacantes pueden pasar cadenas serializadas lo que resulta una inyeccion arbitraria de objetos PHP

#Ok-InputValidation-XSS Reflected-Aut: Son un tipo de inyeccion en el cual scripts maliciosos son inyectados dentro del sitio web. Este tipo de vulnerabilidad permite a un atacante ejecutar scripts del lado del cliente como cookies, tokens, u otra informacion contenida por el navgador. Los scripts se ejecutan como un mensaje de error es decir que no almacena el sitio web el script, por lo que para realizar un ataque con esta vulnerabilidad se requiere una ruta de ataque adicional como un correo u otro sitio web de manera que cuando el cliente acceda a la liga generada se ejecute el script.

#OK-InputValidation-XSS Stored-Aut: Es muy similar al anterior (XSS Reflected) sin embargo en este los scripts inyectados se almacenan de manera permanente en una base de datos, por lo cual la victima ejecuta el scriptmalicioso al realizar la peticion al servidor.                                                                                                                                  

#Ok-XSS DOM-Based-Manual:Es un ataque XSS en el que la carga util del atacante se ejecuta como resultado de modificar el entorno DOM en el navegador de la victima utilizado por el script original del lado del cliente, de modo que el codigo se ejecuta de una manera inesperada, es decir la respuesta http no cambia.Por lo que la unica manera de detectar esta vulnerabilidad es de manera manual.

#Ok-InputValidation-LFI-Aut: Tambien es llamada Path-traversal, Directory-traversal permite a un atacante incluir archivos en un servidor a traves del navegador web manipulando variables de referencia de archivos with ../. 

#InputValidation-RFI: Es similar al anterior (LFI), la diferencia es en que en lugar de incluir un archivo local del servidor incluimos un archivo remoto de otro servirdor, lo cual permite incluir archivos con codigo malicioso que permita obtener acceso al servidor.

#SSRF/XSPA
#Sessions Flaws
#Insecure Direct Object Reference
#Missing Functional Access Control
#CSRF
#Cryptography
#Redirects & Forwards
#Server Side Template Injection

#Payloads

	#SqlInjection
		#/usr/share/wfuzz/wordlist/Injections/SQL.txt
	#OsCommandInjection
		#/usr/share/wordlists/SecLists/Fuzzing/command-injection-commix.txt
		#/usr/share/wordlists/fuzzdb/attack/os-cmd-execution/OSCommandInject.Windows.txt
	#CrossSiteScripting
		#/usr/share/wfuzz/wordlist/Injections/XSS.txt
	#LFI
		#/usr/share/wordlists/fuzzdb/attack/lfi/common-unix-httpd-log-locations.txt
	#RFI
		#/usr/share/wordlists/fuzzdb/attack/rfi/rfi.txt
	#FileInclusion
		#/usr/share/wordlists/fuzzdb/attack/file-upload/alt-extensions-php.txt
	#PathTraversal
		#/usr/share/wordlists/fuzzdb/attack/path-traversal/traversals-8-deep-exotic-encoding.txt
	#Redirect
		# /usr/share/wordlists/fuzzdb/attack/redirect
	#ServerSideInclude
		#/usr/share/wordlists/fuzzdb/attack/server-side-include/server-side-includes-generic.txt
	#XPathInjection
		#/usr/share/wordlists/fuzzdb/attack/xpath/xpath-injection.txt

#Urls, Parametros, Payloads.
	
	#Metodos POST
#/xvwa/login.php username=test&password=test
#/xvwa/vulnerabilities/sqli/ item=1&search=testSqlInjection
#/xvwa/vulnerabilities/sqli_blind/ item=1&search=testSqlInjectionBlind
#/xvwa/vulnerabilities/xpath/ search=testXPATHInjection&submit=
#/xvwa/vulnerabilities/stored_xss/ name=testXssPersistent&msg=+testXssPersistent
#/xvwa/vulnerabilities/formula_injection/export.php action=export-PendientePayload-Manual
#/xvwa/vulnerabilities/ssrf_xspa/ img_url=http%3A%2F%2Fgoogle.com-PendientePayload-Manual
##/xvwa/vulnerabilities/fileupload/-PendientePayload-Manual

	#Metodos GET
#/xvwa/vulnerabilities/cmdi/?target=PentestServer3
#/xvwa/vulnerabilities/reflected_xss/?item=testXssReflected
#/xvwa/vulnerabilities/dom_xss/?search=testXssDOM-PendientePayloadManual.
#/xvwa/vulnerabilities/fi/?file=readme.txt
#/xvwa/vulnerabilities/php_object_injection/?r=a:2:{i:0;s:4:%22XVWA%22;i:1;s:33:%22Xtreme%20Vulnerable%20Web%20Application%22;}-PendientePayloadManual.
#/xvwa/vulnerabilities/idor/?item=1
#/xvwa/vulnerabilities/missfunc/?item=1&action=view
#/xvwa/vulnerabilities/csrf/?passwd=xvwa&confirm=xvwa&submit=submit
#/xvwa/vulnerabilities/crypto/?item=TEST
#/xvwa/vulnerabilities/redirect/redirect.php?forward=https://www.owasp.org
#/xvwa/vulnerabilities/ssti/?name=test&submit=


servidor="http://xvwa"
proxy="127.0.0.1:8080"

###################################################POST################################################################

payload=(
	#/usr/share/wordlists/fuzzdb/attack/all-attacks/all-attacks-unix.txt
	/usr/share/wfuzz/wordlist/Injections/SQL.txt
	#/usr/share/wordlists/fuzzdb/attack/xpath/xpath-injection.txt
	#/usr/share/wfuzz/wordlist/Injections/XSS.txt
        #/usr/share/wordlists/fuzzdb/attack/os-cmd-execution/command-execution-unix.txt
        #/usr/share/wfuzz/wordlist/vulns/dirTraversal-nix.txt
)

url=(
#	/xvwa/login.php
	/xvwa/vulnerabilities/sqli/
	/xvwa/vulnerabilities/sqli_blind/
	/xvwa/vulnerabilities/xpath/
#	/xvwa/vulnerabilities/stored_xss/
#	/xvwa/vulnerabilities/formula_injection/export.php
#	/xvwa/vulnerabilities/ssrf_xspa/
	#/xvwa/vulnerabilities/fileupload/

)

#DiccionarioPeticiones
declare -A peticionPost
peticionPost=(
	[/xvwa/login.php]='username=FUZZ&password='
	[/xvwa/vulnerabilities/sqli/]='item=FUZZ&search='
	[/xvwa/vulnerabilities/sqli_blind/]='item=FUZZ&search='
	[/xvwa/vulnerabilities/xpath/]='search=FUZZ&submit='
	[/xvwa/vulnerabilities/stored_xss/]='name=FUZZ&msg='
 	[/xvwa/vulnerabilities/formula_injection/export.php]='action=FUZZ'
	[/xvwa/vulnerabilities/ssrf_xspa/]='img_url=FUZZ'
	##[/xvwa/vulnerabilities/fileupload/]
)

declare -A peticionPost2
peticionPost2=(
	[/xvwa/login.php]='username=&password=FUZZ'
	[/xvwa/vulnerabilities/sqli/]='item=&search=FUZZ'
	[/xvwa/vulnerabilities/sqli_blind/]='item=&search=FUZZ'
	[/xvwa/vulnerabilities/xpath/]='search=&submit=FUZZ'
	[/xvwa/vulnerabilities/stored_xss/]='name=&msg=FUZZ'
)

declare -A peticionPost3
peticionPost3=(
        [/xvwa/login.php]='username=FUZZ&password=FUZZ'
        [/xvwa/vulnerabilities/sqli/]='item=FUZZ&search=FUZZ'
        [/xvwa/vulnerabilities/sqli_blind/]='item=FUZZ&search=FUZZ'
        [/xvwa/vulnerabilities/xpath/]='search=FUZZ&submit=FUZZ'
        [/xvwa/vulnerabilities/stored_xss/]='name=FUZZ&msg=FUZZ'
)

for vuln in "${payload[@]}"; do
	for liga in "${url[@]}"; do
		
		echo "wfuzz -c -t 50 -w $vuln -p $proxy -d \"${peticionPost[$liga]}\" $servidor$liga"
		echo "wfuzz -c -t 50 -w $vuln -p $proxy -d \"${peticionPost[$liga]}\" $servidor$liga" >> vulnSalida.txt
		wfuzz -c -t 50 -w $vuln -p $proxy -d "${peticionPost[$liga]}" $servidor$liga >> vulnSalida.txt
		
		echo "wfuzz -c -t 50 -w $vuln -p $proxy -d \"${peticionPost2[$liga]}\" $servidor$liga"
		echo "wfuzz -c -t 50 -w $vuln -p $proxy -d \"${peticionPost2[$liga]}\" $servidor$liga" >> vulnSalida.txt
		wfuzz -c -t 50 -w $vuln -p $proxy -d "${peticionPost2[$liga]}" $servidor$liga >> vulnSalida.txt
		
		echo "wfuzz -c -t 50 -w $vuln -p $proxy -d \"${peticionPost3[$liga]}\" $servidor$liga" 
		echo "wfuzz -c -t 50 -w $vuln -p $proxy -d \"${peticionPost3[$liga]}\" $servidor$liga" >> vulnSalida.txt
		wfuzz -c -t 50 -w $vuln -p $proxy -d "${peticionPost3[$liga]}" $servidor$liga >> vulnSalida.txt
	done
done


###################################################GET################################################################

payloadGet=(
	#/usr/share/wordlists/fuzzdb/attack/all-attacks/all-attacks-unix.txt
	/usr/share/wfuzz/wordlist/Injections/SQL.txt
	#/usr/share/wordlists/fuzzdb/attack/xpath/xpath-injection.txt
	#/usr/share/wfuzz/wordlist/Injections/XSS.txt
        #/usr/share/wordlists/fuzzdb/attack/os-cmd-execution/command-execution-unix.txt
        #/usr/share/wfuzz/wordlist/vulns/dirTraversal-nix.txt
)

urlGet=(
#	/xvwa/vulnerabilities/cmdi/
#	/xvwa/vulnerabilities/reflected_xss/
#	/xvwa/vulnerabilities/dom_xss/
#	/xvwa/vulnerabilities/fi/
#	/xvwa/vulnerabilities/idor/
#	/xvwa/vulnerabilities/missfunc/
#	/xvwa/vulnerabilities/crypto/
#	/xvwa/vulnerabilities/redirect/redirect.php
#	/xvwa/vulnerabilities/ssti/
#	/xvwa/vulnerabilities/php_object_injection/
	#/xvwa/vulnerabilities/csrf/
	)

#DiccionarioPeticiones
declare -A peticionGet
peticionGet=(
	[/xvwa/vulnerabilities/cmdi/]='/xvwa/vulnerabilities/cmdi/?target=FUZZ' 
	[/xvwa/vulnerabilities/reflected_xss/]='/xvwa/vulnerabilities/reflected_xss/?item=FUZZ'
        [/xvwa/vulnerabilities/dom_xss/]='/xvwa/vulnerabilities/dom_xss/?search=FUZZ'
        [/xvwa/vulnerabilities/fi/]='/xvwa/vulnerabilities/fi/?file=FUZZ'
	[/xvwa/vulnerabilities/idor/]='/xvwa/vulnerabilities/idor/?item=FUZZ'
	[/xvwa/vulnerabilities/missfunc/]='/xvwa/vulnerabilities/missfunc/?item=FUZZ&action=view'
	[/xvwa/vulnerabilities/crypto/]='/xvwa/vulnerabilities/crypto/?item=FUZZ'
	[/xvwa/vulnerabilities/redirect/redirect.php]='/xvwa/vulnerabilities/redirect/redirect.php?forward=FUZZ'
	[/xvwa/vulnerabilities/ssti/]='/xvwa/vulnerabilities/ssti/?name=FUZZ&submit='
	[/xvwa/vulnerabilities/php_object_injection/]='/xvwa/vulnerabilities/php_object_injection/?r=FUZZ'
	#[/xvwa/vulnerabilities/csrf/]='/xvwa/vulnerabilities/csrf/?passwd=xvwa&confirm=xvwa&submit=submit'
)

for vuln in "${payloadGet[@]}"; do
        for liga in "${urlGet[@]}"; do

		echo "wfuzz -c -t 50 -w $vuln -p $proxy $servidor${peticionGet[$liga]}"
		echo "wfuzz -c -t 50 -w $vuln -p $proxy $servidor${peticionGet[$liga]}" >> vulnSalida.txt
                wfuzz -c -t 50 -w $vuln -p $proxy $servidor${peticionGet[$liga]} >> vulnSalida.txt
        done
done




